---
description: 
globs: 
alwaysApply: true
---
# Modul: CI-Styling-Presets (Vollst√§ndig Implementiert)

## Zweck
Das CI-Styling-Modul definiert Designvorlagen zur konsistenten visuellen Gestaltung von Landingpages, E-Mails, Flyern und Werbeanzeigen. Der Nutzer erh√§lt mit minimalem Input (Farben, Schriften, Button-Stil) automatisch ein stimmiges, CI-konformes Gesamtbild.

---

## üóÑÔ∏è Datenbankstruktur

### Haupttabelle: `public.ci_templates`

| Feld                      | Typ      | Beschreibung                                    |
|---------------------------|----------|-------------------------------------------------|
| id                        | UUID     | Prim√§rschl√ºssel (gen_random_uuid())             |
| name                      | TEXT     | Template-Name (z.B. "Fr√ºhjahrskampagne 2025")  |
| description               | TEXT     | Optional: Beschreibung/Verwendungszweck        |
| primary_color             | TEXT     | Prim√§rfarbe (Hex-Format)                        |
| secondary_color           | TEXT     | Sekund√§rfarbe (Hex-Format)                      |
| accent_color              | TEXT     | Akzentfarbe (Hex-Format)                        |
| background_color          | TEXT     | Hintergrundfarbe (Standard: #ffffff)            |
| text_color                | TEXT     | Textfarbe (Standard: #000000)                   |
| font_family               | TEXT     | Hauptschriftart (z.B. "Inter")                 |
| font_headline             | TEXT     | √úberschriftschriftart                           |
| font_sizes                | JSONB    | `{h1: "32px", h2: "24px", body: "16px"}`      |
| button_style              | JSONB    | `{radius: "6px", padding: "12px 24px"}`       |
| icon_style                | JSONB    | `{style: "outline", color: "auto", shape: "round"}` |
| block_styles              | JSONB    | Spezifische Block-Designs                       |
| spacing_config            | JSONB    | Abst√§nde und Spacing-Regeln                    |
| accessibility_aa_compliant| BOOLEAN  | AA-Konformit√§t erreicht                        |
| linked_campaign_id        | UUID     | Optional: Verkn√ºpfung zu Kampagne               |
| campaign_scope            | ENUM     | 'single', 'all' - Kampagnenbereich             |
| is_default                | BOOLEAN  | Standard-Template (nur eins aktiv)              |
| parent_ci_id              | UUID     | Optional: Vererbung von Master-CI               |
| is_master_ci              | BOOLEAN  | Master Corporate Identity Template              |
| category                  | TEXT     | Kategorisierung (z.B. "Kampagne", "Saisonal")  |
| target_audience           | JSONB    | Legacy: Zielgruppendaten                        |
| target_audience_detailed  | JSONB    | `{description, age_min, age_max, interests, sports_goals}` |
| usage_purpose             | TEXT[]   | Array von Verwendungszwecken                    |
| logos                     | JSONB    | `{primary, white, black, favicon}` URLs        |
| tags                      | TEXT[]   | Freie Schlagworte f√ºr Suche/Filter             |
| created_at                | TIMESTAMP| Erstellungszeitpunkt                            |
| updated_at                | TIMESTAMP| Letzte √Ñnderung                                 |

### Erweiterte Tabellen

#### `public.ci_logos`
| Feld           | Typ      | Beschreibung                           |
|----------------|----------|----------------------------------------|
| id             | UUID     | Prim√§rschl√ºssel                        |
| ci_template_id | UUID     | FK ‚Üí ci_templates.id                   |
| logo_type      | ENUM     | 'primary', 'white', 'black', 'favicon', 'action_special' |
| file_asset_id  | UUID     | FK ‚Üí file_asset.id                     |
| is_inherited   | BOOLEAN  | Von Master-CI geerbt                   |
| description    | TEXT     | Optional: Logo-Beschreibung            |
| created_at     | TIMESTAMP| Erstellungszeitpunkt                   |

#### `public.ci_settings`
| Feld          | Typ      | Beschreibung                            |
|---------------|----------|-----------------------------------------|
| id            | UUID     | Prim√§rschl√ºssel                         |
| setting_type  | ENUM     | 'category', 'target_audience_config', 'usage_purpose' |
| setting_key   | TEXT     | Einstellungsschl√ºssel                   |
| setting_value | JSONB    | Einstellungswert (flexibel)             |
| is_active     | BOOLEAN  | Aktiv/Inaktiv Status                    |
| created_at    | TIMESTAMP| Erstellungszeitpunkt                    |
| updated_at    | TIMESTAMP| Letzte √Ñnderung                         |

#### `public.ci_target_audiences`
| Feld        | Typ      | Beschreibung                 |
|-------------|----------|------------------------------|
| id          | UUID     | Prim√§rschl√ºssel              |
| name        | TEXT     | Zielgruppenname              |
| age_min     | INTEGER  | Mindestalter                 |
| age_max     | INTEGER  | H√∂chstalter                  |
| gender      | ENUM     | 'male', 'female', 'all'      |
| interests   | TEXT[]   | Array von Interessen         |
| description | TEXT     | Beschreibung                 |
| is_active   | BOOLEAN  | Aktiv/Inaktiv                |
| created_at  | TIMESTAMP| Erstellungszeitpunkt         |

---

## üé® UI/UX Implementierung

### Dashboard-Layout (`app/(protected)/ci-styling/page.tsx`)

#### **Header-Bereich**
```tsx
- Titel: "CI-Styling Dashboard"
- Untertitel: "Verwalten Sie alle Ihre Corporate Identity Styles an einem Ort"
- Aktions-Buttons: 
  - "Einstellungen" (f√ºhrt zu /ci-styling/einstellungen)
  - "Neues Style anlegen" (f√ºhrt zu /ci-styling/einstellungen?create=true)
```

#### **Filter-System**
```tsx
- Toggle-Button "Filter" mit aktivem/inaktivem Zustand
- Ausklappbare Filter-Sektion mit 4 Dropdowns:
  - Kategorie (aus ci_settings geladen)
  - Kampagne (aus campaigns-API)
  - Verwendungszweck (vordefinierte Liste)
  - Zielgruppe (definiert/undefiniert)
- "Filter zur√ºcksetzen" Button bei aktiven Filtern
```

#### **Grid-Layout**
```tsx
- Responsive Grid: 1-4 Spalten je Bildschirmgr√∂√üe
- Master-Design IMMER als erstes Element (wenn vorhanden)
- Gefilterte Designs folgen danach
- Empty-State f√ºr "Erstes Style erstellen"
- No-Results-State bei leeren Filtern
```

### StyleCard-Komponente

#### **Card-Struktur**
```tsx
- Master-Designs: Gelber Rand + Gradient-Hintergrund
- Normale Designs: Grauer Rand mit Hover-Effekt
- Crown-Icon f√ºr Master-Designs
- Farbvorschau: 3 Kreise (Prim√§r-, Sekund√§r-, Akzentfarbe)
- Font-Familie angezeigt
- Live-Vorschau mit Beispiel-Elementen
```

#### **Aktions-Buttons**
```tsx
- Settings-Icon: F√ºhrt zu /ci-styling/einstellungen?style={id}
- Edit-Icon: F√ºhrt zu /ci-styling/editor?id={id}
- Copy-Icon: Dupliziert das Design (nur bei Nicht-Master)
- Trash-Icon: √ñffnet Delete-Modal (nur bei Nicht-Master)
- Alle Buttons haben Hover-States und Loading-Deaktivierung
```

#### **Badge-System**
```tsx
- Kategorie-Badge: Blau mit Tag-Icon
- Kampagnen-Badge: Gr√ºn mit Target-Icon
- Verwendungszweck-Badge: Lila mit Globe-Icon
- Zielgruppen-Badge: Orange mit Users-Icon
- Status-Badge: "Standard" f√ºr Default-Templates
```

### Delete-Confirmation Modal

#### **Modal-Design**
```tsx
- Overlay: Schwarzer Hintergrund (50% Transparenz)
- Modal: Wei√üer Container mit abgerundeten Ecken
- Icon-Bereich: Roter Kreis mit Trash-Icon
- Titel: "Style l√∂schen"
- Warnung: "Diese Aktion kann nicht r√ºckg√§ngig gemacht werden"
- Style-Name wird hervorgehoben
```

#### **Button-Bereich**
```tsx
- "Abbrechen": Grauer Button (schlie√üt Modal)
- "L√∂schen": Roter Button mit Loading-Spinner
- Beide Buttons werden w√§hrend L√∂schvorgang deaktiviert
- Loading-Text: "L√∂schen..." mit Spinner
```

---

## üîß API-Struktur (`app/lib/api/ci-templates.ts`)

### **CITemplatesAPI Objekt**

#### **CRUD-Operationen**
```tsx
- getAll(): Promise<CITemplate[]> - Alle Templates laden
- getMasterCIs(): Promise<CITemplate[]> - Nur Master-CIs
- getSubCIs(parentId): Promise<CITemplate[]> - Sub-CIs einer Master-CI
- getById(id): Promise<CITemplate | null> - Einzelnes Template
- create(template): Promise<CITemplate> - Neues Template erstellen
- update(id, template): Promise<CITemplate> - Template aktualisieren
- delete(id): Promise<void> - Template l√∂schen (mit Logging)
- duplicate(id, newName): Promise<CITemplate> - Template duplizieren
```

#### **Logo-Management**
```tsx
- getLogos(templateId): Promise<CILogo[]> - Logos eines Templates
- addLogo(logo): Promise<CILogo> - Logo hinzuf√ºgen
- updateLogo(id, logo): Promise<CILogo> - Logo aktualisieren
- deleteLogo(id): Promise<void> - Logo l√∂schen
```

#### **Einstellungs-Management**
```tsx
- getSettings(type?): Promise<CISetting[]> - System-Einstellungen
- saveSetting(key, value): Promise<CISetting> - Einstellung speichern
- updateSetting(type, key, value): Promise<CISetting> - Einstellung aktualisieren
```

#### **Utility-Funktionen**
```tsx
- getInheritedSettings(templateId): Promise<CITemplate> - Vererbung von Master-CI
- calculateContrast(color1, color2): number - AA-Konformit√§t pr√ºfen
- exportBrandGuidelines(templateId): Promise<Blob> - PDF-Export (geplant)
```

---

## üõ†Ô∏è State Management

### **Haupt-States**
```tsx
- styles: CITemplate[] - Alle Nicht-Master Designs
- masterStyle: CITemplate | null - Das Master-Design
- isLoading: boolean - Globaler Loading-Zustand
- showDeleteModal: boolean - Modal-Sichtbarkeit
- styleToDelete: CITemplate | null - Zu l√∂schendes Design
```

### **Filter-States**
```tsx
- filters: {
    category: string,
    campaign: string, 
    usage_purpose: string,
    target_group: string
  }
- showFilters: boolean - Filter-Sektion sichtbar
- availableCategories: string[] - Verf√ºgbare Kategorien
- availableCampaigns: any[] - Verf√ºgbare Kampagnen
```

### **Loading-Strategien**
```tsx
- loadStyles(): L√§dt Master + Normale Designs separat
- loadSettings(): L√§dt Kategorien aus ci_settings mit Fallback
- loadCampaigns(): Placeholder f√ºr Kampagnen-Integration
- Alle API-Calls mit try/catch und Error-Logging
```

---

## üéØ Master-CI System

### **Master-Design Konzept**
- **Ein Master-Design pro System** (is_master_ci = true)
- **Immer als erstes Element** im Grid angezeigt
- **Crown-Icon und spezielles Design** zur Unterscheidung
- **Nicht l√∂schbar** (UI + Validierung)
- **Vererbung**: Sub-CIs k√∂nnen Eigenschaften √ºbernehmen

### **Auto-Creation Flow**
```tsx
- Wenn kein Master existiert: "Kein Masterdesign" Placeholder
- "Erstellen" Button erzeugt Standard-Master-CI
- Automatische Weiterleitung zum Design-Editor
- Standard-Werte: Inter Font, blaues Farbschema
```

### **Vererbungslogik**
```tsx
- parent_ci_id verweist auf Master-CI
- getInheritedSettings() merged Parent + Child Properties
- Child-Properties √ºberschreiben Parent-Properties
- ID und Name bleiben beim Child erhalten
```

---

## üì± Responsive Design

### **Breakpoints**
```tsx
- Mobile: 1 Spalte (grid-cols-1)
- Tablet: 2 Spalten (md:grid-cols-2)  
- Desktop: 3 Spalten (lg:grid-cols-3)
- Large: 4 Spalten (xl:grid-cols-4)
```

### **Mobile Optimierungen**
- **Filter**: Vollbreite Dropdowns
- **Cards**: Reduzierte Padding-Werte
- **Buttons**: Touch-freundliche Gr√∂√üen
- **Modal**: Responsive max-width mit mx-4 margin

---

## üîç Filter & Search Logic

### **Filter-Implementierung**
```tsx
getFilteredStyles(): 
- Kategorie: Exakte √úbereinstimmung
- Kampagne: linked_campaign_id Vergleich
- Verwendungszweck: Array.includes() Check
- Zielgruppe: Existenz-Check (defined/undefined)
```

### **Fallback-Mechanismen**
```tsx
- Kategorien: FALLBACK_CATEGORIES wenn API fehlschl√§gt
- Kampagnen: Placeholder-Daten f√ºr Demo
- Verwendungszweck: PREDEFINED_USAGE_PURPOSES Konstante
```

---

## üîÑ Routing-Struktur

### **Pfad-Definitionen**
```
/ci-styling                           ‚Üí Dashboard (√úbersicht)
/ci-styling/einstellungen             ‚Üí Globale Einstellungen
/ci-styling/einstellungen?create=true ‚Üí Neues Design erstellen  
/ci-styling/einstellungen?style={id}  ‚Üí Design-spezifische Einstellungen
/ci-styling/editor?id={id}            ‚Üí Design-Editor (Split-View)
```

### **Navigation-Flow**
```
1. Dashboard ‚Üí Settings-Icon ‚Üí Design-Einstellungen
2. Dashboard ‚Üí Edit-Icon ‚Üí Design-Editor  
3. Dashboard ‚Üí "Neues Design" ‚Üí Einstellungen (Create-Mode)
4. Einstellungen (Create) ‚Üí "Speichern & Weiter" ‚Üí Editor
```

---

## üé® Design-Tokens & Styling

### **Farbsystem**
```css
- Master-CI: border-yellow-300, bg-gradient-to-br from-yellow-50
- Normal-Cards: border-gray-200, hover:border-gray-300
- Delete-Button: text-red-600, hover:bg-red-50
- Settings-Button: text-blue-600, hover:bg-blue-50
- Copy-Button: text-green-600, hover:bg-green-50
```

### **Icon-System**
```tsx
- Crown: Master-CI Kennzeichnung
- Settings: Konfiguration/Einstellungen
- Edit: Design-Editor √∂ffnen
- Copy: Design duplizieren
- Trash2: Design l√∂schen
- Tag/Target/Globe/Users: Badge-Icons
```

---

## üö® Error Handling & Logging

### **Console-Logging Strategie**
```tsx
- üóëÔ∏è L√∂schfunktionen mit detailliertem Logging
- ‚úÖ Erfolgreiche API-Operationen
- ‚ùå Fehler mit Stack-Trace Details
- üîÑ Loading-States und Prozess-Tracking
```

### **User-Feedback**
```tsx
- Alert-Dialoge f√ºr Erfolg/Fehler
- Loading-Spinner in Buttons
- Deaktivierte UI-Elemente w√§hrend Operationen
- Modal-States f√ºr kritische Aktionen
```

### **Validierungen**
```tsx
- ID-Existence Checks vor API-Calls
- Master-CI L√∂sch-Schutz
- Loading-State Management
- Error-Boundary-Pattern f√ºr API-Fehler
```

---

## üîó Integration mit anderen Modulen

### **Dateimanager-Verkn√ºpfung**
- Logos werden als file_assets gespeichert
- Upload √ºber Dateimanager-Komponenten
- Kategorisierung: 'logo', 'ci_asset'

### **Kampagnen-Integration**
- linked_campaign_id verkn√ºpft CI mit Kampagnen
- Automatische CI-Zuweisung bei Kampagnen-Erstellung
- campaign_scope definiert Anwendungsbereich

### **Landingpage-Integration**
- CI-Templates werden in Landingpage-Builder verf√ºgbar
- Automatische Stil-Anwendung basierend auf Kampagne
- Live-Vorschau mit CI-Einstellungen

---

## üìã Validation Rules

### **Datenbank-Constraints**
```sql
- Nur ein is_master_ci = true Template erlaubt
- name darf nicht leer sein
- Farbwerte m√ºssen Hex-Format haben (#xxxxxx)
- linked_campaign_id muss existierende Kampagne referenzieren
```

### **Frontend-Validierungen**
```tsx
- Master-CI kann nicht gel√∂scht werden
- Erforderliche Felder vor Speicherung pr√ºfen
- Farbkontrast-Validierung f√ºr AA-Konformit√§t
- Template-Name muss eindeutig sein
```

---

## üéØ Performance Optimierungen

### **Loading-Strategien**
- Master und normale Designs parallel laden
- Lazy Loading f√ºr Logo-Assets
- Caching von Settings und Kategorien
- Debounced Filter-Updates

### **API-Optimierungen**
- Batch-Updates f√ºr mehrere Eigenschaften
- Optimistic Updates f√ºr bessere UX
- Error-Recovery mit Retry-Logic
- Minimale Daten√ºbertragung durch selective Queries

---

Dieses vollst√§ndig implementierte CI-Styling-Modul bietet eine professionelle, benutzerfreundliche Oberfl√§che f√ºr Corporate Identity Management mit robusten Backend-Funktionen und modernem UI/UX-Design.
