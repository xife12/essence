---
description: 
globs: 
alwaysApply: true
---
# 🏥 System-Gesundheits-Orchestrator für MemberCore (✅ ERWEITERT MIT INTELLIGENT HEALTH-AUDIT + GUTEN MORGEN WORKFLOW)

## 🎯 Mission
Automatisierte Überwachung und Optimierung der gesamten Systemgesundheit durch Integration von:
- **Memory Bank** für AI-Context-Persistenz
- **Intelligent Health-Audit** für automatische alwaysApply-Enforcement  
- **Cursor Rules** für Code-Qualität & Standards mit Live-Sync
- **Taskmaster AI** für strukturiertes Task-Management
- **Health Monitoring** für kontinuierliche Systemüberwachung
- **🆕 "Guten Morgen" Daily Start Workflow** für täglichen Arbeitsbeginn
- **🆕 Critical Review System** für alle Änderungen und Anpassungen
- **🆕 Dependency & Flow Charts** für visuelle System-Übersicht

---

## 🌅 "GUTEN MORGEN" DAILY START WORKFLOW (🆕 NEU)

### Trigger: Kommando "Guten Morgen"
```
🌅 GUTEN MORGEN DAILY START SEQUENCE:

Phase 1: 🏥 Umfassender System Health Check
✅ Projektgesundheit prüfen (Dupletten, Rules, DB, Dependencies)
✅ Alle Module auf alwaysApply-Compliance prüfen
✅ Kritische Issues und Red Flags scannen
✅ Performance-Metriken validieren
✅ Memory Bank Integrität prüfen
✅ Dependency Charts aktualisieren

Phase 2: 📊 Gestern vs. Heute Analysis
✅ Memory Bank Progress analysieren
✅ Gestern erledigte Tasks zusammenfassen
✅ Offene Tasks für heute identifizieren
✅ Blockierende Dependencies ermitteln
✅ Kritische Prioritäten setzen

Phase 3: 🚨 Problem & Issue Report
✅ Bekannte Probleme auflisten
✅ Potentielle Risiken identifizieren
✅ Handlungsempfehlungen generieren
✅ Kritische Entscheidungen hervorheben

Phase 4: 🎯 Daily Action Plan
✅ Prioritized Task-Liste erstellen
✅ Optimaler Arbeitsflow vorschlagen
✅ Dependency-optimierte Reihenfolge
✅ Zeit-Schätzungen basierend auf Komplexität
```

### Daily Health Report Format:
```md
# 🌅 DAILY SYSTEM HEALTH REPORT - {{DATUM}}

## 🏥 SYSTEM GESUNDHEIT
- **Overall Health Score:** {{score}}/100
- **Critical Issues:** {{count}} 
- **alwaysApply Compliance:** {{percentage}}%
- **Rule Integrity:** {{status}}
- **Memory Bank Status:** {{status}}
- **Dependency Health:** {{status}}

## 📊 GESTERN ERLEDIGT
{{task_list_completed}}

## 🎯 HEUTE ZU ERLEDIGEN  
{{task_list_pending}}

## 🚨 KRITISCHE PUNKTE
{{critical_issues}}

## 📈 EMPFOHLENER WORKFLOW
{{optimized_workflow}}
```

---

## 🔍 KRITISCHES RÜCKFRAGE-SYSTEM (🆕 NEU)

### Trigger: Bei ALLEN Änderungen, Anpassungen, Neuerungen

#### Rückfrage-Protokoll für Neue Module (ohne Rules):
```
🔍 KRITISCHE RÜCKFRAGEN - NEUES MODUL ERKANNT:

1. Modul-Purpose & Scope:
   ❓ Was ist der exakte Zweck dieses Moduls?
   ❓ Welche Business-Logic wird implementiert?
   ❓ Welche APIs/Endpoints werden benötigt?

2. Dependencies & Integrations:
   ❓ Von welchen Modulen hängt es ab?
   ❓ Welche Module werden davon abhängen?
   ❓ Welche externe APIs werden verwendet?

3. Security & Access:
   ❓ Welche RLS-Policies werden benötigt?
   ❓ Welche Rollen haben Zugriff?
   ❓ Sensible Daten vorhanden?

4. Performance & Scaling:
   ❓ Erwartete Datenmenge?
   ❓ Performance-kritische Operationen?
   ❓ Caching-Strategien erforderlich?

→ NACH RÜCKFRAGEN: Automatische Rule-Erstellung mit alwaysApply: true
→ Integration in Dependency Chart
→ Flow Chart Generation
→ Memory Bank Update
```

#### Rückfrage-Protokoll für Bestehende Module (mit Rules):
```
🔍 KRITISCHE RÜCKFRAGEN - MODUL-ÄNDERUNG ERKANNT:

1. Änderungs-Impact:
   ❓ Welche bestehenden Features sind betroffen?
   ❓ Breaking Changes für abhängige Module?
   ❓ API-Kompatibilität gewährleistet?

2. Rule-Konsistenz:
   ❓ Sind die Rules noch aktuell?
   ❓ Neue Dependencies entstanden?
   ❓ Sicherheits-Implikationen?

3. Integration-Updates:
   ❓ Müssen andere Module angepasst werden?
   ❓ Dependency Chain noch optimal?
   ❓ Performance-Impact auf System?

→ NACH RÜCKFRAGEN: Rules-Datei überprüfen und anpassen
→ Dependency Chart aktualisieren
→ Flow Chart anpassen
→ Memory Bank synchronisieren
```

---

## 📊 DEPENDENCY & FLOW CHARTS SYSTEM (🆕 NEU)

### Memory Bank Charts-Struktur:
```
memory-bank/
├── charts/
│   ├── dependency-overview.md         # Master Dependency Chart
│   ├── module-dependencies.md         # Detaillierte Modul-Abhängigkeiten
│   ├── flow-charts/
│   │   ├── {modulename}-flow.md      # Flow Chart pro Modul
│   │   ├── api-integration-flow.md   # API-Integrationsflows
│   │   └── data-flow-overview.md     # Datenfluss-Übersicht
│   └── auto-updates/
│       ├── last-update.log           # Letzte Chart-Updates
│       └── dependency-history.md     # Änderungshistorie
```

### Dependency Chart Format:
```mermaid
graph TB
    subgraph "Core System"
        A[Authentication] --> B[Member Management]
        C[Database Layer] --> D[API Layer]
    end
    
    subgraph "Business Modules"
        E[Vertragsarten-V2] --> F[Formbuilder]
        G[Kampagnen] --> H[Landingpages]
        I[Kursplan] --> J[Buchungssystem]
    end
    
    subgraph "Support Modules"
        K[Dateimanager] --> L[CI-Styling]
        M[Testimonials] --> N[Payment System]
    end
    
    B --> E
    F --> G
    H --> I
    D --> all_modules
```

### Flow Chart pro Modul Format:
```mermaid
flowchart TD
    Start([User Action]) --> Check{Auth Check}
    Check -->|Valid| Process[Business Logic]
    Check -->|Invalid| Error[Error Handling]
    Process --> Validate{Data Validation}
    Validate -->|Valid| Save[Database Save]
    Validate -->|Invalid| ValidationError[Validation Error]
    Save --> Update[UI Update]
    Update --> End([Process Complete])
```

### Kontinuierliche Chart-Updates:
```
🔄 AUTO-UPDATE-TRIGGERS:
- Bei neuen Modulen → Dependency Chart erweitern
- Bei API-Änderungen → Flow Chart anpassen  
- Bei Dependencies-Updates → Beziehungen neu bewerten
- Bei Breaking Changes → Impact-Analysis und Chart-Updates
- Täglich bei "Guten Morgen" → Vollständige Chart-Validierung
```

---

## 🔄 ERWEITETER AUTOMATISCHER WORKFLOW (UPDATED)

### Phase 0: Pre-Work Critical Review (🆕 ERWEITERT)
```
1. Module-Detection
   🔍 Erkenne Modul-Arbeit (Dateipfad-Analysis)
   🔍 Identifiziere zugehörige Rule-Files
   🆕 Trigger Critical Review Questions
   
2. Compliance-Check (AUTOMATISCH)
   ⚡ @health-audit [modulename] --pre-work-check
   ⚡ Prüfe alwaysApply: true für alle Module-Rules
   ⚡ AUTO-FIX bei Violations (ohne User-Intervention)
   🆕 Critical Questions für neue/geänderte Module
   
3. Rule-Code-Sync (LIVE + ENHANCED)
   🔄 Vergleiche Code vs Rules
   🔄 Integriere undokumentierte Features automatisch
   🔄 Update Rules mit neuen Komponenten/APIs
   🆕 Dependency Chart Update
   🆕 Flow Chart Anpassung
```

### Phase 1: Session-Start (Automatisch erweitert + Guten Morgen)
```
1. Memory Bank Loading
   ✅ Lese memory-bank/activeContext.md
   ✅ Prüfe memory-bank/progress.md  
   ✅ Verstehe aktuellen Arbeitsstand
   🆕 Lade Dependency & Flow Charts
   
2. Enhanced System Health Check
   ✅ Führe @health-audit --comprehensive durch
   ✅ Prüfe kritische Dependencies
   ✅ Validiere ALL Rules für alwaysApply: true
   ✅ AUTO-FIX bei Compliance-Violations
   🆕 Validiere Chart-Konsistenz
   
3. Taskmaster Sync (wenn verfügbar)
   ✅ Sync mit .taskmaster/tasks.json
   ✅ Check PRD-Aktualität
   ✅ Update Task-Prioritäten
   🆕 Dependency-optimierte Task-Reihenfolge
```

### Phase 2: Arbeits-Session (Kontinuierlich + Live-Sync + Critical Review)
```
1. Proaktive Überwachung
   🔍 @audit-on-create bei neuen/geänderten Rules
   🔍 @task-flow bei Modul-Änderungen
   🔍 Memory Bank Updates bei significant changes
   🔍 🆕 LIVE-MONITORING: Code → Rules Synchronisation
   🆕 Critical Review bei jeder Änderung
   🆕 Real-time Dependency Chart Updates
   
2. Automatische Korrekturen (ERWEITERT)
   🔧 Globs-Patterns korrigieren
   🔧 Dependencies aktualisieren
   🔧 Alias-Inkonsistenzen beheben
   🔧 🆕 alwaysApply-Violations sofort fixen
   🔧 🆕 Neue Features direkt in Rules integrieren
   🆕 Critical Questions bei Änderungen stellen
   🆕 Charts kontinuierlich anpassen
   
3. Performance Monitoring
   📊 Health-Score Tracking
   📊 Dependency-Zyklen erkennen
   📊 Code-Quality Metrics
   📊 🆕 Rule-Compliance-Score (Target: 100%)
   📊 🆕 Rule-Sync-Health: Code↔Rules Synchronisation-Status
   🆕 Chart-Konsistenz-Monitoring
```

---

## 🎛️ ERWEITERTE STEUERUNGSKOMMANDOS (UPDATED)

### Daily Start Commands (🆕 NEU)
- `Guten Morgen` - 🆕 Vollständiger Daily Start Workflow
- `@daily-health-report` - 🆕 Täglicher Gesundheitsbericht
- `@yesterday-summary` - 🆕 Zusammenfassung gestrige Arbeit
- `@today-planning` - 🆕 Heutiger optimaler Arbeitsplan

### Critical Review Commands (🆕 NEU)
- `@critical-review [modulename]` - 🆕 Kritische Rückfragen für Modul
- `@create-rules-critical` - 🆕 Rule-Erstellung mit Critical Questions
- `@update-rules-critical` - 🆕 Rule-Update mit Impact-Analysis

### Chart Management Commands (🆕 NEU)
- `@update-dependency-chart` - 🆕 Dependency Chart aktualisieren
- `@generate-flow-chart [modulename]` - 🆕 Flow Chart für Modul erstellen
- `@validate-charts` - 🆕 Alle Charts auf Konsistenz prüfen
- `@chart-impact-analysis` - 🆕 Impact-Analysis für Chart-Änderungen

### Sofortige Aktionen (ERWEITERT)
- `@system-health` - Vollständiger System-Check + alwaysApply-Enforcement
- `@system-health --fix` - Automatische Problembehebung + Rule-Fixes
- `@system-health --memory-sync` - Memory Bank Force-Update
- `@system-health --taskmaster-sync` - Taskmaster-Integration prüfen
- `@system-health --always-apply-audit` - 🆕 Reine alwaysApply-Compliance-Prüfung
- `@system-health --live-sync` - 🆕 Code→Rules Live-Synchronisation
- `@system-health --charts-sync` - 🆕 Charts-Synchronisation

---

## 🚨 ERWEITERTE KRITISCHE ÜBERWACHUNGSPUNKTE (UPDATED)

### Red Flags (Sofortige Auto-Action)
- Health Score < 90/100 → Automatischer @system-health --fix
- **🆕 alwaysApply: true detected** → Sofortige Auto-Korrektur (KRITISCH)
- Zirkuläre Dependencies zwischen Modulen → Auto-Detection + Report
- Memory Bank Sync-Fehler > 10 Sekunden → Force-Sync
- **🆕 Rule-Code-Divergenz > 24h** → Automatische Live-Sync
- Kritische Security Issues (RLS, Input Validation) → Immediate Alert
- **🆕 Chart-Inkonsistenzen** → Sofortige Chart-Regeneration
- **🆕 Fehlende Critical Review** → Blockierung bis Rückfragen beantwortet

### Yellow Flags (Enhanced Monitoring)
- Health Score 90-95/100 → Continuous Monitoring
- Rule-Inkonsistenzen > 3% aller Dateien (verschärft von 5%)
- Performance-Degradation > 15% baseline (verschärft von 20%)
- Dokumentations-Coverage < 98% (verschärft von 95%)
- **🆕 Undocumentierte Features > 48h** → Auto-Integration-Trigger
- **🆕 Veraltete Charts > 72h** → Auto-Update erforderlich

---

## 🎯 ERWEITERTE KRITISCHE ERFOLGSFAKTOREN (UPDATED)

### **Null-Toleranz-Bereiche:**
1. **alwaysApply: true** → Sofortige Auto-Korrektur (nie User fragen)
2. **Undokumentierte Features** → Automatische Integration in < 5 Min
3. **Rule-Code-Divergenz** → Live-Sync ohne User-Intervention
4. **Compliance-Violations** → Blockiert weitere Arbeit bis behoben
5. **🆕 Fehlende Critical Review** → Keine Änderungen ohne Rückfragen
6. **🆕 Chart-Inkonsistenzen** → Sofortige Regeneration erforderlich

### **Performance-Ziele:**
- Auto-Fix-Zeit: < 10 Sekunden
- Live-Sync-Latenz: < 5 Sekunden  
- Health-Check-Zeit: < 30 Sekunden
- Rule-Integration-Zeit: < 2 Minuten
- **🆕 Daily Start Workflow: < 60 Sekunden**
- **🆕 Critical Review Response: < 30 Sekunden**
- **🆕 Chart-Update-Zeit: < 15 Sekunden**

---

> **ZIEL:** Ein vollständig selbstregulierendes System mit täglichem "Guten Morgen" Workflow, kritischen Rückfragen bei allen Änderungen, und kontinuierlicher visueller Übersicht durch Dependency & Flow Charts - alles mit Null-Toleranz für Inkonsistenzen.
