### Delete-Confirmation Modal

#### **Modal-Design**
```tsx
- Overlay: Schwarzer Hintergrund (50% Transparenz)
- Modal: Wei√üer Container mit abgerundeten Ecken
- Icon-Bereich: Roter Kreis mit Trash-Icon
- Titel: "Style l√∂schen"
- Warnung: "Diese Aktion kann nicht r√ºckg√§ngig gemacht werden"
- Style-Name wird hervorgehoben
```

#### **Button-Bereich**
```tsx
- "Abbrechen": Grauer Button (schlie√üt Modal)
- "L√∂schen": Roter Button mit Loading-Spinner
- Beide Buttons werden w√§hrend L√∂schvorgang deaktiviert
- Loading-Text: "L√∂schen..." mit Spinner
```

---
alwaysApply: true
## üîß API-Struktur (`app/lib/api/ci-templates.ts`)

### **CITemplatesAPI Objekt**

#### **CRUD-Operationen**
```tsx
- getAll(): Promise<CITemplate[]> - Alle Templates laden
- getMasterCIs(): Promise<CITemplate[]> - Nur Master-CIs
- getSubCIs(parentId): Promise<CITemplate[]> - Sub-CIs einer Master-CI
- getById(id): Promise<CITemplate | null> - Einzelnes Template
- create(template): Promise<CITemplate> - Neues Template erstellen
- update(id, template): Promise<CITemplate> - Template aktualisieren
- delete(id): Promise<void> - Template l√∂schen (mit Logging)
- duplicate(id, newName): Promise<CITemplate> - Template duplizieren
```

#### **Logo-Management**
```tsx
- getLogos(templateId): Promise<CILogo[]> - Logos eines Templates
- addLogo(logo): Promise<CILogo> - Logo hinzuf√ºgen
- updateLogo(id, logo): Promise<CILogo> - Logo aktualisieren
- deleteLogo(id): Promise<void> - Logo l√∂schen
```

### **CI-Logos Tabelle (`public.ci_logos`)**
```sql
CREATE TABLE public.ci_logos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ci_template_id UUID REFERENCES ci_templates(id) ON DELETE CASCADE,
  logo_type TEXT CHECK (logo_type IN ('primary', 'white', 'black', 'favicon', 'action_special')),
  file_asset_id UUID REFERENCES file_asset(id) ON DELETE SET NULL,
  is_inherited BOOLEAN DEFAULT false,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);
```

**Logo-Typen:**
- `primary` - Haupt-Logo (farbig)
- `white` - Logo f√ºr dunkle Hintergr√ºnde  
- `black` - Logo f√ºr helle Hintergr√ºnde
- `favicon` - Icon f√ºr Browser-Tabs
- `action_special` - Spezial-Logo f√ºr Aktionen/Events

#### **Einstellungs-Management**
```tsx
- getSettings(type?): Promise<CISetting[]> - System-Einstellungen
- saveSetting(key, value): Promise<CISetting> - Einstellung speichern
- updateSetting(type, key, value): Promise<CISetting> - Einstellung aktualisieren
```

#### **Utility-Funktionen**
```tsx
- getInheritedSettings(templateId): Promise<CITemplate> - Vererbung von Master-CI
- calculateContrast(color1, color2): number - AA-Konformit√§t pr√ºfen
- exportBrandGuidelines(templateId): Promise<Blob> - PDF-Export (geplant)
```

---
alwaysApply: true
## üõ†Ô∏è State Management

### **Haupt-States**
```tsx
- styles: CITemplate[] - Alle Nicht-Master Designs
- masterStyle: CITemplate | null - Das Master-Design
- isLoading: boolean - Globaler Loading-Zustand
- showDeleteModal: boolean - Modal-Sichtbarkeit
- styleToDelete: CITemplate | null - Zu l√∂schendes Design
```

### **Filter-States**
```tsx
