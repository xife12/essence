---
description: 
globs: 
alwaysApply: true
---
# Modul: Beitragskonto-System (üöÄ ERWEITERT - 24.06.2025 | üîß SCHEMA-FIXES - 25.06.2025)

## üéØ Zweck
Das erweiterte Beitragskonto-System stellt Mitglieder-Finanzdaten in pr√§ziser Tabellenform dar mit automatisierter Business-Logic f√ºr Stillegungen, K√ºndigungen und Guthaben-Management.

---

## üîÑ **AUTOMATISCHE BEITRAGSKONTO-ERSTELLUNG (üÜï GEKL√ÑRT - 25.06.2025)**

### **üéØ TRIGGER-EREIGNISSE f√ºr Beitragskonto-Generierung:**

#### **1. Bei Mitgliedschaft-Erstellung (Member Detail Page):**
```typescript
// üìç LOKATION: app/(protected)/mitglieder/[id]/page.tsx:555
// TRIGGER: Neue Mitgliedschaft mit Status 'active' oder 'planned'

const processMembershipAdd = async () => {
  // ... Mitgliedschaft erstellen ...
  
  if (status === 'active' || status === 'planned') {
    // üéØ AUTOMATISCHE BEITRAGSKALENDER-GENERIERUNG
    const contractData = {
      id: newMembership.id,
      start_date: data.start_date,
      end_date: data.end_date,
      monthly_fee: 89.90, // TODO: From CONTRACT_TYPES
      payment_frequency: 'monthly'
    };
    
    // ‚úÖ TRIGGER: BeitragskalenderGenerator.onMemberCreated()
    BeitragskalenderGenerator.onMemberCreated(member.id, contractData);
  }
};
```

#### **2. Bei PDF-Import (Magicline-Integration):**
```typescript
// üìç LOKATION: lib/services/pdf-processor.ts:1008
// TRIGGER: generateBeitragskalenderFromContract()

public generateBeitragskalenderFromContract(memberData: ExtractedMemberData, memberId: string) {
  // Generiert 12 monatliche Eintr√§ge + Setup Fee + Admin Fee
  // Verwendet 'membership_fee', 'pauschale' transaction_types
  // Automatische Erstellung in beitragskalender Tabelle
}
```

#### **3. Bei Member Account Creation:**
```typescript
// üìç LOKATION: lib/api/payment-system.ts:189
// TRIGGER: createMemberAccount() mit SEPA-Daten

async createMemberAccount(memberId: string, accountData: {
  iban: string;
  mandateReference: string;
  mandateSignedDate?: Date;
  initialBalance?: number;
}) {
  // Erstellt member_accounts Eintrag
  // UNIQUE(member_id) - Ein Konto pro Mitglied
  // Automatische Verkn√ºpfung f√ºr Beitragskonto-Display
}
```

### **üìä DATENFLUSS-ABH√ÑNGIGKEITEN:**

```
1. MITGLIEDSCHAFT ERSTELLT ‚Üí BeitragskalenderGenerator.onMemberCreated()
2. BEITRAGSKALENDER EINTR√ÑGE ‚Üí beitragskalender Tabelle (VARCHAR member_id)
3. MEMBER ACCOUNT ERSTELLT ‚Üí member_accounts Tabelle (UUID member_id)
4. TRANSAKTIONEN ERSTELLT ‚Üí member_transactions Tabelle
5. BEITRAGSKONTO ANZEIGE ‚Üí Kombination aller Datenquellen
```

### **üîß KRITISCHE SCHEMA-HARMONISIERUNG (25.06.2025):**

#### **Problem gel√∂st: Transaction-Type-Mapping**
```typescript
// ‚úÖ VORHER: Inkonsistente Types
// beitragskalender: 'membership_fee', 'pauschale'  
// BeitragskontoTable: 'membership_fee', 'setup_fee'

// ‚úÖ NACHHER: Unified Mapping
const typeLabels = {
  // DATABASE VALUES:
  'beitrag': 'Monatsbeitrag',
  'startpaket': 'Startpaket', 
  'pauschale': 'Pauschale',
  'gebuehr': 'Geb√ºhr',
  
  // LEGACY SUPPORT:
  'membership_fee': 'Monatsbeitrag',
  'setup_fee': 'Startpaket'
};
```

#### **Problem gel√∂st: API-Integration**
```typescript
// ‚úÖ VORHER: Mock-Data in Komponenten
// ‚úÖ NACHHER: Echte APIs implementiert

// Neue APIs:
PaymentSystemAPI.getBeitragskontoHeader(memberId)
PaymentSystemAPI.getBeitragskontoEntries(memberId, options)
```

---

## üìä BEITRAGSKONTO-DARSTELLUNG

### **üî∏ HEADER-BEREICH (√úber Tabelle)**
```typescript
interface BeitragskontoHeader {
  saldo: {
    amount: number;
    status: 'offen' | 'ausgeglichen' | 'guthaben';
    color: 'red' | 'green' | 'blue';
    display: string; // "49,90‚Ç¨ offen", "Ausgeglichen", "23,50‚Ç¨ Guthaben"
  };
  naechste_faelligkeit: {
    date: string; // ISO Date
    amount: number;
    type: 'beitrag' | 'pauschale' | 'startpaket' | 'gebuehr';
    description: string;
  };
  bereits_gezahlt_kumuliert: {
    amount: number;
    seit_vertragsbeginn: string; // ISO Date
    anzahl_zahlungen: number;
  };
}
```

### **üî∏ TABELLEN-STRUKTUR (Exakt nach Spezifikation)**
| Spalte | Datentyp | Beschreibung | Quelle |
|--------|----------|--------------|--------|
| **F√§lligkeit** | DATE | F√§lligkeitsdatum | `member_transactions.transaction_date` |
| **Typ** | ENUM | Forderungstyp | `transaction_type: beitrag\|pauschale\|startpaket\|gebuehr` |
| **Beschreibung** | TEXT | Detailbeschreibung | Aus Mitgliedschaftseinstellungen + Zeitraum |
| **Lastschriftgruppe** | TEXT | Zahllaufgruppe | `payment_groups.name` |
| **Betrag** | DECIMAL | F√§lliger Betrag | `member_transactions.amount` |
| **USt.** | PERCENTAGE | Steuersatz | Aus Mitgliedschaftseinstellungen |
| **Zahlweise** | TEXT | Zahlungsart | Lastschrift/√úberweisung/Bar |
| **Offen** | DECIMAL | **KRITISCH**: Noch zu zahlender Betrag | Siehe "Offen"-Logik |

---

## üßÆ "OFFEN"-LOGIK (PR√ÑZISE BUSINESS-RULES)

### **Berechnung des "Offen"-Betrags:**
```typescript
interface OffenBerechnung {
  faelliger_betrag: number;        // Urspr√ºnglich f√§lliger Betrag
  bereits_gezahlt: number;         // Bereits eingegangene Zahlungen
  ruecklastschriften: number;      // Zur√ºckgegangene Lastschriften
  
  // FORMEL: offen = faelliger_betrag - bereits_gezahlt + ruecklastschriften
  offen_betrag: number;
}

// ERGEBNISSE:
// 0,00‚Ç¨ = Vollst√§ndig bezahlt
// Differenzbetrag = Bei anteiliger Bezahlung (z.B. 49,90‚Ç¨ f√§llig, 30,00‚Ç¨ gezahlt = 19,90‚Ç¨ offen)
// Urspr√ºnglicher Betrag = Bei vollst√§ndiger R√ºcklastschrift (z.B. 49,90‚Ç¨ zur√ºckgegangen = 49,90‚Ç¨ offen)
```

### **Status-Darstellung:**
- **0,00‚Ç¨** ‚Üí Gr√ºner Text, ‚úÖ Icon
- **Betrag > 0** ‚Üí Roter Text, ‚ö†Ô∏è Icon  
- **√úberzahlung** ‚Üí Blauer Text, üí∞ Icon (negativer "Offen"-Betrag)

---

## üîÑ AUTOMATISIERTE BUSINESS-LOGIC

### **üî∏ STILLEGUNGEN (RUHEZEITEN)**

#### **R√ºckwirkende Stillegung:**
```typescript
// Wenn Stilllegung vor letzter Abbuchung liegt
if (stillegung.start_date < letzter_abbuchungstermin) {
  const rueckerstattung = berechneBeitragsanteil(
    stillegung.start_date,
    stillegung.end_date,
    monatsbeitrag
  );
  
  // Gutschrift erstellen
  createTransaction({
    type: 'storno',
    amount: rueckerstattung, // Positiv = Gutschrift
    description: `R√ºckwirkende Stilllegung ${formatDateRange(stillegung)}`,
    reference_number: `STIL-${member_id}-${Date.now()}`
  });
}
```

#### **Zuk√ºnftige Stillegung:**
```typescript
// Beitr√§ge f√ºr Stilllegungszeitraum auf 0 setzen
const betroffene_f√§lligkeiten = getUpcomingPayments(
  stillegung.start_date,
  stillegung.end_date
);

betroffene_f√§lligkeiten.forEach(f√§lligkeit => {
  updateTransaction(f√§lligkeit.id, {
    amount: 0,
    description: `${f√§lligkeit.description} (Stillgelegt)`
  });
});
```

#### **Reaktivierung:**
```typescript
// End-Datum um Stilllegungsdauer verl√§ngern
const stillegungsdauer = calculateDuration(stillegung.start_date, stillegung.end_date);
const neues_end_datum = addDaysToDate(original_end_date, stillegungsdauer);

updateMembership(membership_id, {
  end_date: neues_end_datum,
  status: 'active'
});
```

### **üî∏ AUTOMATISCHE STORNIERUNGEN**

#### **Sonderk√ºndigungsrecht:**
```typescript
const kuendigungsgruende_automatisch = [
  'sonderkuendigung',
  'studio_verschulden', 
  'gesundheitliche_gruende',
  'umzug_nachweisbar'
];

if (kuendigungsgruende_automatisch.includes(kuendigung.grund)) {
  // Alle zuk√ºnftigen F√§lligkeiten stornieren
  const zukuenftige_f√§lligkeiten = getUpcomingPayments(kuendigung.datum);
  
  zukuenftige_f√§lligkeiten.forEach(f√§lligkeit => {
    createTransaction({
      type: 'storno',
      amount: f√§lligkeit.amount,
      description: `Automatische Stornierung: ${kuendigung.grund}`,
      related_transaction_id: f√§lligkeit.id
    });
  });
}
```

#### **Studio-K√ºndigung:**
```typescript
// Bei Studio-initiierter K√ºndigung sofortige Stornierung
if (kuendigung.initiated_by === 'studio') {
  const sofortige_stornierung = calculateProRataRefund(
    kuendigung.datum,
    letzter_abbuchungstermin,
    monatsbeitrag
  );
  
  if (sofortige_stornierung > 0) {
    createTransaction({
      type: 'storno',
      amount: sofortige_stornierung,
      description: `Studio-K√ºndigung anteilige R√ºckerstattung`
    });
  }
}
```

### **üî∏ GUTHABEN-MANAGEMENT**

#### **Automatische Guthaben-Verrechnung:**
```typescript
// Bei positivem Saldo automatisch mit n√§chsten F√§lligkeiten verrechnen
if (member_account.balance > 0) {
  const naechste_f√§lligkeiten = getUpcomingPayments(member_id, 6); // 6 Monate voraus
  let verbleibendes_guthaben = member_account.balance;
  
  naechste_f√§lligkeiten.forEach(f√§lligkeit => {
    if (verbleibendes_guthaben >= f√§lligkeit.amount) {
      // Vollst√§ndige Verrechnung
      markAsPaid(f√§lligkeit.id, 'guthaben_verrechnung');
      verbleibendes_guthaben -= f√§lligkeit.amount;
    } else if (verbleibendes_guthaben > 0) {
      // Teilweise Verrechnung
      createPartialPayment(f√§lligkeit.id, verbleibendes_guthaben, 'guthaben_verrechnung');
      verbleibendes_guthaben = 0;
    }
  });
}
```

---

## üóÑÔ∏è ERWEITERTE DATENBANKSTRUKTUR

### **Enhanced transaction_type ENUM:**
```sql
-- Erweitere bestehenden ENUM um 'pauschale'
ALTER TYPE transaction_type ADD VALUE 'pauschale';

-- Vollst√§ndige Liste:
-- 'beitrag', 'lastschrift', 'storno', 'ruhezeit', 'verkauf', 
-- 'startpaket', 'gebuehr', 'ueberzahlung', 'korrektur', 'pauschale'
```

### **Sales-Tool-Platzhalter Felder:**
```sql
-- Erweitere member_transactions f√ºr zuk√ºnftige Sales-Tool-Integration
ALTER TABLE member_transactions ADD COLUMN sales_tool_reference_id UUID;
ALTER TABLE member_transactions ADD COLUMN sales_tool_origin TEXT CHECK (sales_tool_origin IN ('sales_tool', 'manual', 'import', 'automatic'));
ALTER TABLE member_transactions ADD COLUMN business_logic_trigger TEXT; -- 'stillegung', 'kuendigung', 'guthaben_verrechnung'

-- Index f√ºr Performance
CREATE INDEX idx_member_transactions_sales_tool ON member_transactions(sales_tool_reference_id);
CREATE INDEX idx_member_transactions_origin ON member_transactions(sales_tool_origin);
```

### **Enhanced Payment-Status-Tracking:**
```sql
-- Erweitere payment_run_items f√ºr pr√§zise "Offen"-Berechnung
ALTER TABLE payment_run_items ADD COLUMN partial_payment_amount DECIMAL(10,2) DEFAULT 0;
ALTER TABLE payment_run_items ADD COLUMN return_partial_amount DECIMAL(10,2) DEFAULT 0;
ALTER TABLE payment_run_items ADD COLUMN outstanding_amount DECIMAL(10,2) GENERATED ALWAYS AS (
  amount - COALESCE(partial_payment_amount, 0) + COALESCE(return_partial_amount, 0)
) STORED;
```

---

## üé® UI/UX-KOMPONENTEN

### **BeitragskontoHeader.tsx:**
```typescript
interface BeitragskontoHeaderProps {
  memberId: string;
  memberName: string;
  showActions?: boolean;
}

export function BeitragskontoHeader({ 
  memberId, 
  memberName, 
  showActions = true 
}: BeitragskontoHeaderProps) {
  // Implementierung:
  // - Saldo-Anzeige mit Farbkodierung
  // - N√§chste F√§lligkeit mit Countdown
  // - Kumulierte Zahlungen seit Vertragsbeginn
  // - Action-Buttons f√ºr Korrekturen (wenn showActions=true)
}
```

### **BeitragskontoTable.tsx:**
```typescript
interface BeitragskontoTableProps {
  memberId: string;
  showHistorical?: boolean;
  maxRows?: number;
}

export function BeitragskontoTable({ 
  memberId, 
  showHistorical = false, 
  maxRows = 12 
}: BeitragskontoTableProps) {
  // Implementierung:
  // - Exakte Spalten-Struktur nach Spezifikation
  // - "Offen"-Berechnung mit pr√§ziser Logik
  // - Sortierung nach F√§lligkeit (neueste zuerst)
  // - Pagination bei maxRows √úberschreitung
}
```

---

## üîó API-ERWEITERUNGEN

### **Enhanced PaymentSystemAPI:**
```typescript
export class PaymentSystemAPI {
  // Neue Methoden f√ºr Beitragskonto-System
  
  async getBeitragskontoHeader(memberId: string): Promise<BeitragskontoHeader> {
    // Berechnet Saldo, n√§chste F√§lligkeit, kumulierte Zahlungen
  }
  
  async getBeitragskontoEntries(
    memberId: string, 
    options: {
      includeHistorical?: boolean;
      dateRange?: { start: string; end: string };
      limit?: number;
    }
  ): Promise<BeitragskontoEntry[]> {
    // L√§dt Beitragskonto-Eintr√§ge mit "Offen"-Berechnung
  }
  
  async processStillegung(
    memberId: string,
    stillegung: {
      start_date: string;
      end_date: string;
      grund: string;
      rueckwirkend: boolean;
    }
  ): Promise<{ success: boolean; gutschrift?: number; message: string }> {
    // Automatisierte Stillegung mit Gutschrift-Berechnung
  }
  
  async processAutomaticStornierung(
    memberId: string,
    kuendigung: {
      datum: string;
      grund: string;
      initiated_by: 'member' | 'studio';
    }
  ): Promise<{ success: boolean; storniert_amount: number; message: string }> {
    // Automatische Stornierung bei Sonderk√ºndigungsrecht
  }
  
  async processGuthabenVerrechnung(
    memberId: string
  ): Promise<{ success: boolean; verrechnet_amount: number; verbleibend: number }> {
    // Automatische Guthaben-Verrechnung mit zuk√ºnftigen F√§lligkeiten
  }
}
```

---

## üß™ TESTING & VALIDATION

### **Test-Szenarien f√ºr Business-Logic:**
1. **R√ºckwirkende Stillegung**: Gutschrift bei bereits erfolgter Abbuchung
2. **Zuk√ºnftige Stillegung**: Beitrags-Nullstellung f√ºr Zeitraum
3. **Sonderk√ºndigung**: Automatische Stornierung aller zuk√ºnftigen F√§lligkeiten
4. **R√ºcklastschrift**: "Offen"-Betrag = urspr√ºnglicher Betrag
5. **Anteilige Zahlung**: "Offen"-Betrag = Differenz
6. **Guthaben-Verrechnung**: Automatische Verrechnung mit n√§chsten F√§lligkeiten

### **Edge Cases:**
- Mehrfache R√ºcklastschriften f√ºr gleiche F√§lligkeit
- √úberzahlung bei anschlie√üender Stillegung
- Gleichzeitige Stillegung und K√ºndigung
- Reaktivierung nach bereits erfolgter Guthaben-Verrechnung

---

## üìä SUCCESS METRICS

### **Beitragskonto-Darstellung:**
- **Datengenauigkeit**: 100% korrekte "Offen"-Berechnung
- **Performance**: < 500ms Loading-Zeit f√ºr 24-Monats-√úbersicht
- **User-Experience**: Intuitive Header-Informationen f√ºr sofortige Orientierung

### **Business-Logic-Automatisierung:**
- **Stillegung-Automatik**: 100% korrekte Gutschrift-Berechnung
- **Stornierung-Automatik**: 0% manuelle Intervention bei Sonderk√ºndigungsrecht
- **Guthaben-Verrechnung**: Automatische Optimierung der Cash-Flow

---

> **MODULE STATUS**: üöÄ READY FOR IMPLEMENTATION - Alle Spezifikationen definiert  
> **DEPENDENCIES**: payment-system-database.mdc, mitglieder-overview.mdc  
> **INTEGRATION**: Vollst√§ndige Tab-Integration in Mitglieder-Detailseite

---

*Erstellt: 24.06.2025 - Beitragskonto-System Extension*
