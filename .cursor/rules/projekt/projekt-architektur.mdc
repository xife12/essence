````

---

## Routing

- Jede Route ist geschützt durch Auth → Nutzung von Supabase Session in Middleware
- Fehlerquelle vermeiden: Bei API-Fehlern (`404`, `401`) soll Cursor eine eigene Fehlerkomponente rendern
- API-Aufrufe immer über Wrapper: `lib/api.ts`

### Beispiel: `middleware.ts`
```ts
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'

export async function middleware(req) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })
  const { data: { session } } = await supabase.auth.getSession()

  if (!session) return NextResponse.redirect('/login')
  return res
}
````

---

## Verhalten von Cursor AI

* Fehlerbehandlung:

  * Inline bei Validierungsfehlern
  * Toast (oben rechts) bei API-/Logikfehlern
* Navigation/UX:

  * Immer mit PageTitle, optionalem Breadcrumb und Aktions-Button
  * Keine versteckten Routen – alles ist sichtbar oder gesperrt
* Validierungslogik:

  * Clientseitig UND Supabase-seitig (Trigger, Policies)
* Routing:

  * Auf Datei-Layout basieren
  * Keine Client-only Navigation verwenden

---

## Datenbeziehungen (Auszug)

* `leads.campaign_id → campaigns.id`
* `consultations.lead_id → leads.id`
* `memberships.member_id → members.id`
* `memberships.contract_type_id → contract_types.id`
* `consultations.planned_contract_type_id → contract_types.id`

---

## ToDo durch Cursor beim Projektstart

* Projektstruktur wie oben erzeugen
* Alle Layouts mit Sidebar + Topbar gemäß `frontend.mdc` erstellen
* Alle Routen per App Router anlegen
* Supabase-Client zentral konfigurieren
* Auth-Middleware einbinden
* API-Wrapper mit Fehlerbehandlung implementieren

```
