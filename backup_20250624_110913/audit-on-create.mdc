---
description:
globs:
alwaysApply: false
---
# Audit: Kursplan-Modul Implementation

## üìã Pr√ºf-Checkliste

### ‚úÖ **Phase 1: Datenbank & Backend (Kritisch)**

#### Datenbank-Migration
- [ ] **course_categories** Tabelle existiert
  - [ ] Alle Felder gem√§√ü Schema (id, name, description, icon, color, sort_order, is_visible, timestamps)
  - [ ] UUID Primary Key mit gen_random_uuid()
  - [ ] NOT NULL Constraints auf name, is_visible
  - [ ] Default-Werte f√ºr sort_order (0) und is_visible (true)

- [ ] **course_rooms** Tabelle existiert
  - [ ] Alle Felder gem√§√ü Schema (id, name, location, max_capacity, description, is_active, category_ids, timestamps)
  - [ ] category_ids als UUID[] Array-Type
  - [ ] max_capacity > 0 Constraint
  - [ ] Default is_active = true

- [ ] **courses** Tabelle existiert
  - [ ] Alle Felder gem√§√ü Schema (12 Spalten + timestamps)
  - [ ] Foreign Key Constraints zu course_categories, staff, course_rooms
  - [ ] max_participants >= current_participants Constraint
  - [ ] Default-Werte f√ºr is_public (true), is_special (false)

- [ ] **course_schedules** Tabelle existiert
  - [ ] Alle Felder gem√§√ü Schema
  - [ ] Foreign Key zu courses mit ON DELETE CASCADE
  - [ ] day_of_week zwischen 0-6 Constraint
  - [ ] start_time < end_time Constraint
  - [ ] Unique Index auf (course_id, day_of_week, start_time) f√ºr regul√§re Kurse

#### RLS Policies
- [ ] Alle Tabellen haben Row Level Security aktiviert
- [ ] Read-Policies f√ºr alle Rollen (public courses f√ºr alle, private f√ºr berechtigte)
- [ ] Write-Policies nur f√ºr Admin/Studioleiter
- [ ] Trainer k√∂nnen nur eigene Kurse einsehen/bearbeiten

---

### ‚úÖ **Phase 2: API-Layer (Kritisch)**

#### API-Dateien existieren:
- [ ] `lib/api/courses.ts` - Vollst√§ndige CRUD-Operationen
- [ ] `lib/api/courseCategories.ts` - Kategorien-Verwaltung
- [ ] `lib/api/courseRooms.ts` - R√§ume-Verwaltung  
- [ ] `lib/api/courseSchedules.ts` - Zeitplan-Management

#### API-Funktionen implementiert:
```typescript
// courses.ts
- [ ] getAll(filters?) ‚Üí Course[]
- [ ] getById(id) ‚Üí Course
- [ ] getWeekSchedule(date) ‚Üí WeekSchedule
- [ ] create(data) ‚Üí Course
- [ ] update(id, data) ‚Üí Course
- [ ] delete(id) ‚Üí void
- [ ] checkConflicts(scheduleData) ‚Üí Conflict[]
- [ ] getPublicCourses() ‚Üí Course[] (f√ºr Landingpages)
```

#### Error Handling & Validierung:
- [ ] Alle API-Calls haben try-catch Error Handling
- [ ] Input-Validierung bei create/update
- [ ] Conflict-Detection f√ºr Raum/Trainer-√úberschneidungen
- [ ] Rollback bei fehlgeschlagenen Multi-Table-Operationen

---

### ‚úÖ **Phase 3: UI-Struktur (Erforderlich)**

#### Verzeichnis-Struktur:
```
- [ ] app/(protected)/kursplan/page.tsx (Wochen√ºbersicht)
- [ ] app/(protected)/kursplan/neu/page.tsx (existiert, Backend-Integration erforderlich)
- [ ] app/(protected)/kursplan/kategorien/page.tsx
- [ ] app/(protected)/kursplan/raeume/page.tsx  
- [ ] app/(protected)/kursplan/einstellungen/page.tsx
- [ ] app/(protected)/kursplan/[id]/page.tsx (Details)
- [ ] app/(protected)/kursplan/[id]/bearbeiten/page.tsx
```

#### Komponenten-Bibliothek:
```
- [ ] app/components/kursplan/KursplanWeekView.tsx
- [ ] app/components/kursplan/KursCard.tsx
- [ ] app/components/kursplan/KursFormModal.tsx
- [ ] app/components/kursplan/CategoryManager.tsx
- [ ] app/components/kursplan/RoomManager.tsx
- [ ] app/components/kursplan/KursFilter.tsx
- [ ] app/components/kursplan/ScheduleMatrix.tsx
```

---

### ‚úÖ **Phase 4: Funktionalit√§t (Kritisch)**

#### Kurs√ºbersicht (Wochenplan):
- [ ] **Zeitraster-Darstellung** (06:00-22:00, 30-Min-Schritte)
- [ ] **Kurskarten** zeigen alle erforderlichen Informationen
- [ ] **Drag & Drop** zum Verschieben von Kursen
- [ ] **Wochennavigation** (Zur√ºck/Weiter)
- [ ] **Filter-Funktionen** (Kategorie, Raum, Trainer, Standort)
- [ ] **Responsive Design** f√ºr Mobile/Tablet

#### Kurs anlegen/bearbeiten:
- [ ] **Bestehende UI** mit Backend verbunden
- [ ] **Validierung** aller Eingabefelder
- [ ] **Wochentag-Matrix** speichert Zeiten korrekt
- [ ] **Kursspezial-Modus** funktioniert (Datumsauswahl)
- [ ] **Conflict-Detection** bei √úberschneidungen
- [ ] **Auto-Save** oder Best√§tigung bei √Ñnderungen

#### Kategorien-Verwaltung:
- [ ] **CRUD-Operationen** vollst√§ndig
- [ ] **Icon-Picker** funktional (Emoji + Lucide)
- [ ] **Farb-Picker** mit Hex-Input
- [ ] **Drag & Drop** Sortierung
- [ ] **Abh√§ngigkeits-Check** vor L√∂schung

#### R√§ume-Verwaltung:
- [ ] **CRUD-Operationen** vollst√§ndig
- [ ] **Kapazit√§ts-Validierung** (> 0)
- [ ] **Kategorie-Zuweisungen** (Multi-Select)
- [ ] **Standort-Management**

---

### ‚úÖ **Phase 5: Integration (Wichtig)**

#### Landingpage-Block:
- [ ] **Kursplan-Block** im Builder funktional
- [ ] **Preset-Auswahl** verf√ºgbar (5+ Presets)
- [ ] **Filter-Konfiguration** im Wizard
- [ ] **Live-Daten** aus Kursplan-API
- [ ] **Mobile-Responsive** Rendering

#### Mitarbeiter-Integration:
- [ ] **Trainer-Dropdown** l√§dt aus staff-Tabelle
- [ ] **Berechtigungen** korrekt implementiert
- [ ] **Trainer k√∂nnen nur eigene Kurse** bearbeiten

#### Supabase Storage (optional):
- [ ] **Kurs-Bilder** Upload-Funktionalit√§t
- [ ] **Icon-Storage** f√ºr Kategorien

---

### ‚úÖ **Phase 6: UX & Performance (Wichtig)**

#### User Experience:
- [ ] **Loading States** bei API-Calls
- [ ] **Error Messages** benutzerfreundlich
- [ ] **Success Notifications** nach Aktionen
- [ ] **Confirmation Dialogs** vor kritischen Aktionen (L√∂schen)
- [ ] **Keyboard Navigation** m√∂glich

#### Performance:
- [ ] **Lazy Loading** f√ºr gro√üe Kursplan-Ansichten
- [ ] **Caching** von Kategorien/R√§umen
- [ ] **Debounced Search** in Filtern
- [ ] **Optimistic Updates** wo m√∂glich

#### Mobile Optimierung:
- [ ] **Touch-freundliche** Gr√∂√üen (min 44px)
- [ ] **Horizontal Scroll** f√ºr Wochenansicht
- [ ] **Stack-Layout** auf schmalen Bildschirmen
- [ ] **Pull-to-Refresh** Funktionalit√§t

---

### ‚úÖ **Phase 7: Sicherheit & Validierung (Kritisch)**

#### Datenschutz:
- [ ] **Keine sensiblen Daten** in Client-State
- [ ] **HTTPS-only** API-Calls
- [ ] **Input Sanitization** gegen XSS

#### Berechtigungen:
- [ ] **Rollen-basierte** Zugriffskontrolle
- [ ] **Server-side Validation** aller Inputs
- [ ] **Rate Limiting** bei API-Endpoints

#### Business Rules:
- [ ] **Keine Doppelbuchungen** von R√§umen
- [ ] **Trainer-Konflikte** werden erkannt
- [ ] **Max. Teilnehmer** kann nicht √ºberschritten werden
- [ ] **Kursdauer** mindestens 15 Minuten

---

## üö® **Kritische Fehler (Sofort beheben)**

### ‚ùå **Backend-Fehler:**
- Fehlende Datenbank-Tabellen
- Falsche Foreign Key Constraints
- Keine RLS Policies
- API-Endpoints nicht erreichbar

### ‚ùå **UI-Fehler:**
- Bestehende "Neuer Kurs" UI nicht mit Backend verbunden
- Wochenplan-Zeitraster nicht funktional
- Mobile-Ansicht v√∂llig unbrauchbar
- Keine Error-Behandlung bei fehlgeschlagenen API-Calls

### ‚ùå **Integration-Fehler:**
- Landingpage-Block zeigt keine echten Daten
- Trainer-Dropdown leer/fehlerhaft
- Kategorie-Farben werden nicht angezeigt
- Berechtigungen nicht implementiert

---

## ‚úÖ **Success Metrics**

### Funktionalit√§t:
- [ ] **Admin kann Kurse verwalten** ohne Errors
- [ ] **Wochenplan zeigt alle Kurse** korrekt an
- [ ] **Landingpage-Block** zeigt Live-Daten
- [ ] **Mobile-Nutzung** ohne Probleme m√∂glich

### Performance:
- [ ] **Seitenladezeit** < 2 Sekunden
- [ ] **API-Response** < 500ms f√ºr Standard-Queries
- [ ] **Smooth Scrolling** in Wochenansicht

### User Experience:
- [ ] **Intuitive Navigation** ohne Schulung m√∂glich
- [ ] **Fehlerbehandlung** hilft bei Probleml√∂sung
- [ ] **Responsive Design** auf allen Ger√§ten

---

## üìä **Audit-Bewertung**

### **Phase-Completion-Rate:**
- Phase 1 (Backend): ___% abgeschlossen
- Phase 2 (API): ___% abgeschlossen  
- Phase 3 (UI): ___% abgeschlossen
- Phase 4 (Funktionalit√§t): ___% abgeschlossen
- Phase 5 (Integration): ___% abgeschlossen
- Phase 6 (UX): ___% abgeschlossen
- Phase 7 (Sicherheit): ___% abgeschlossen

### **Gesamt-Status:**
- üî¥ **Nicht startklar** (< 60% kritische Phasen)
- üü° **Bedingt einsatzbereit** (60-85% kritische Phasen)
- üü¢ **Produktionsbereit** (> 85% alle Phasen)

---

**N√§chste Schritte:** ___________________
**Gesch√§tzte Zeit bis Completion:** _____ Wochen
**Risiko-Level:** Niedrig/Mittel/Hoch
