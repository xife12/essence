---
description: 
globs: 
alwaysApply: true
---
# 🏥 System-Gesundheits-Orchestrator für MemberCore (✅ ERWEITERT MIT INTELLIGENT HEALTH-AUDIT)

## 🎯 Mission
Automatisierte Überwachung und Optimierung der gesamten Systemgesundheit durch Integration von:
- **Memory Bank** für AI-Context-Persistenz
- **Intelligent Health-Audit** für automatische alwaysApply-Enforcement  
- **Cursor Rules** für Code-Qualität & Standards mit Live-Sync
- **Taskmaster AI** für strukturiertes Task-Management
- **Health Monitoring** für kontinuierliche Systemüberwachung

---

## 🔄 ERWEITETER AUTOMATISCHER WORKFLOW

### Phase 0: Pre-Work alwaysApply-Enforcement (🆕 NEU)
```
1. Module-Detection
   🔍 Erkenne Modul-Arbeit (Dateipfad-Analysis)
   🔍 Identifiziere zugehörige Rule-Files
   
2. Compliance-Check (AUTOMATISCH)
   ⚡ @health-audit [modulename] --pre-work-check
   ⚡ Prüfe alwaysApply: true für alle Module-Rules
   ⚡ AUTO-FIX bei Violations (ohne User-Intervention)
   
3. Rule-Code-Sync (LIVE)
   🔄 Vergleiche Code vs Rules
   🔄 Integriere undokumentierte Features automatisch
   🔄 Update Rules mit neuen Komponenten/APIs
```

### Phase 1: Session-Start (Automatisch erweitert)
```
1. Memory Bank Loading
   ✅ Lese memory-bank/activeContext.md
   ✅ Prüfe memory-bank/progress.md  
   ✅ Verstehe aktuellen Arbeitsstand
   
2. Enhanced System Health Check
   ✅ Führe @health-audit --comprehensive durch
   ✅ Prüfe kritische Dependencies
   ✅ Validiere ALL Rules für alwaysApply: true
   ✅ AUTO-FIX bei Compliance-Violations
   
3. Taskmaster Sync (wenn verfügbar)
   ✅ Sync mit .taskmaster/tasks.json
   ✅ Check PRD-Aktualität
   ✅ Update Task-Prioritäten
```

### Phase 2: Arbeits-Session (Kontinuierlich + Live-Sync)
```
1. Proaktive Überwachung
   🔍 @audit-on-create bei neuen/geänderten Rules
   🔍 @task-flow bei Modul-Änderungen
   🔍 Memory Bank Updates bei significant changes
   🔍 🆕 LIVE-MONITORING: Code → Rules Synchronisation
   
2. Automatische Korrekturen (ERWEITERT)
   🔧 Globs-Patterns korrigieren
   🔧 Dependencies aktualisieren
   🔧 Alias-Inkonsistenzen beheben
   🔧 🆕 alwaysApply-Violations sofort fixen
   🔧 🆕 Neue Features direkt in Rules integrieren
   
3. Performance Monitoring
   📊 Health-Score Tracking
   📊 Dependency-Zyklen erkennen
   📊 Code-Quality Metrics
   📊 🆕 Rule-Compliance-Score (Target: 100%)
```

### Phase 3: Session-Ende (Automatisch erweitert)
```
1. Memory Bank Update
   💾 Update activeContext.md mit Session-Ergebnissen
   💾 Sync progress.md mit aktuellen Task-Status
   💾 Dokumentiere wichtige Erkenntnisse
   💾 🆕 Log Auto-Fixes und Rule-Updates
   
2. System Cleanup
   🧹 Temporäre Dateien bereinigen
   🧹 Konsistenz-Checks durchführen
   🧹 Health-Report generieren
   🧹 🆕 Finale alwaysApply-Compliance-Validation
   
3. Next Session Preparation
   📝 Prioritäten für nächste Session setzen
   📝 Kritische Issues markieren
   📝 Context für AI-Handover vorbereiten
   📝 🆕 Rule-Sync-Status dokumentieren
```

---

## 🎛️ ERWEITERTE STEUERUNGSKOMMANDOS

### Sofortige Aktionen (ERWEITERT)
- `@system-health` - Vollständiger System-Check + alwaysApply-Enforcement
- `@system-health --fix` - Automatische Problembehebung + Rule-Fixes
- `@system-health --memory-sync` - Memory Bank Force-Update
- `@system-health --taskmaster-sync` - Taskmaster-Integration prüfen
- `@system-health --always-apply-audit` - 🆕 Reine alwaysApply-Compliance-Prüfung
- `@system-health --live-sync` - 🆕 Code→Rules Live-Synchronisation

### Maintenance-Modi (ERWEITERT)
- `@system-health --audit-all` - Alle Module auditieren + Auto-Fix
- `@system-health --cleanup` - System-Cleanup durchführen
- `@system-health --optimize` - Performance-Optimierungen
- `@system-health --report` - Detaillierter Health-Report
- `@system-health --rule-integrity` - 🆕 100% Rule-Konsistenz-Check
- `@system-health --auto-documentation` - 🆕 Undokumentierte Features integrieren

### Module-spezifische Workflows (🆕 NEU)
- `@system-health [modulname] --pre-work` - Pre-Work-Check für spezifisches Modul
- `@system-health [modulname] --post-work` - Post-Work-Validation
- `@system-health [modulname] --sync` - Modul-spezifische Rule-Code-Synchronisation

---

## 🏗️ ERWEITERTE SYSTEMKOMPONENTEN

### A) Memory Bank Integration (✅ VOLLSTÄNDIG)
- **Automatisches Loading** bei jeder Session
- **Context Persistence** zwischen AI-Sessions  
- **Hierarchical Knowledge** (projectbrief → activeContext → progress)
- **Update Triggers** bei significant changes

### B) Intelligent Health-Audit System (🆕 VOLLSTÄNDIG INTEGRIERT)
- **Pre-Work-Enforcement**: Automatische alwaysApply-Prüfung vor Modul-Arbeit
- **Live-Sync-Monitoring**: Code→Rules Synchronisation in Echtzeit
- **Auto-Integration**: Neue Features werden automatisch dokumentiert
- **Compliance-Enforcement**: Null-Toleranz für alwaysApply: false
- **Module-Spezifische Checks**: Vertragsarten-V2, Formbuilder, etc.

### C) Cursor Rules Management (🔄 ERWEITERT + AUTOMATED)
- **Konsistenz-Prüfung** aller .mdc Dateien
- **Automatische Globs-Korrektur** für korrekte Pfade
- **Dependency-Validation** mit Projekt-Status
- **Alias-Standardisierung** (@modulename-feature Format)
- **🆕 Auto-Fix-Engine**: Violations werden sofort behoben
- **🆕 Live-Documentation**: Code-Änderungen → Rules in Echtzeit

### D) Taskmaster AI Integration (🆕 NEU IMPLEMENTIERT)
- **PRD-Basierte Task-Generierung** aus .taskmaster/docs/prd.txt
- **Research-Backed Subtasks** mit aktuellen Best Practices
- **Komplexitäts-Scoring** (1-10) für Aufwandsschätzung
- **Dependency-Matrix** für optimale Scheduling

### E) Health Monitoring (🔄 ERWEITERT + PREDICTIVE)
- **Real-time Health Score** (aktuell 92/100 nach Rule-Updates)
- **Kritische Issue Detection** (Security, Performance, Dependencies)
- **Automated Fix Suggestions** für häufige Probleme
- **Trend Analysis** für langfristige System-Gesundheit
- **🆕 Compliance-Score**: 100% alwaysApply-Target
- **🆕 Rule-Sync-Health**: Code↔Rules Synchronisation-Status

---

## 📊 ERWEITERTE SUCCESS METRICS & KPIs

### System-Gesundheit (UPDATED)
- **Health Score:** Target 98+/100 (aktuell 92/100 nach Health-Audit-Integration)
- **Rule Consistency:** 100% korrekte Globs & Dependencies
- **🆕 alwaysApply Compliance:** 100% (KRITISCH - NULL-TOLERANZ)
- **Memory Bank Sync:** < 5 Sekunden Session-Start
- **Task Coverage:** 100% Module haben aktuelle Tasks
- **🆕 Rule-Code-Sync:** < 5 Sekunden für Live-Integration

### Developer Experience (ENHANCED)
- **Context Restore Time:** < 10 Sekunden bei Session-Start
- **Issue Detection:** < 30 Sekunden für kritische Probleme
- **Auto-Fix Success Rate:** > 95% für standardisierte Issues (erhöht)
- **Documentation Coverage:** 100% für alle Module
- **🆕 Zero-Manual-Rule-Updates:** 100% automatische Integration

### Integration Health (ADVANCED)
- **Taskmaster Sync:** Bidirektional ohne Konflikte
- **Dependency Resolution:** 0 zirkuläre Dependencies
- **API Consistency:** 100% typisierte Schnittstellen
- **Performance:** Alle Core Web Vitals im grünen Bereich
- **🆕 Rule-Compliance-Gate:** Blockiert Arbeit bei alwaysApply-Violations

---

## 🚨 ERWEITERTE KRITISCHE ÜBERWACHUNGSPUNKTE

### Red Flags (Sofortige Auto-Action)
- Health Score < 90/100 → Automatischer @system-health --fix
- **🆕 alwaysApply: false detected** → Sofortige Auto-Korrektur (KRITISCH)
- Zirkuläre Dependencies zwischen Modulen → Auto-Detection + Report
- Memory Bank Sync-Fehler > 10 Sekunden → Force-Sync
- **🆕 Rule-Code-Divergenz > 24h** → Automatische Live-Sync
- Kritische Security Issues (RLS, Input Validation) → Immediate Alert

### Yellow Flags (Enhanced Monitoring)
- Health Score 90-95/100 → Continuous Monitoring
- Rule-Inkonsistenzen > 3% aller Dateien (verschärft von 5%)
- Performance-Degradation > 15% baseline (verschärft von 20%)
- Dokumentations-Coverage < 98% (verschärft von 95%)
- **🆕 Undocumentierte Features > 48h** → Auto-Integration-Trigger

### Green Status (Enhanced Optimal)
- Health Score 95+/100
- **🆕 100% alwaysApply Compliance** (NEU - KRITISCH)
- Alle Rules konsistent und aktuell
- Memory Bank sync < 5 Sekunden
- 100% Test-Coverage für kritische Pfade
- Zero Known Security Issues
- **🆕 100% Rule-Code-Sync** (Live-Synchronisation aktiv)

---

## 🎯 ERWEITERTE ROADMAP

### Q1 2025 Roadmap (UPDATED)
- [x] **Intelligent Health-Audit** - ✅ IMPLEMENTIERT (18.06.2025)
- [x] **alwaysApply-Enforcement** - ✅ IMPLEMENTIERT (18.06.2025)  
- [x] **Live Rule-Code-Sync** - ✅ IMPLEMENTIERT (18.06.2025)
- [ ] **Predictive Health Analytics** - AI-basierte Früherkennung von Problemen
- [ ] **Auto-Documentation** - Automatische API-Docs aus Code-Analyse
- [ ] **Performance Profiling** - Kontinuierliches Monitoring kritischer Pfade

### Q2 2025 Vision (ENHANCED)
- [ ] **Intelligent Task Scheduling** - AI-optimierte Entwicklungsreihenfolge
- [ ] **Code Quality Gates** - Automatische Standards-Enforcement
- [ ] **Integration Testing Automation** - End-to-End Test-Generierung
- [ ] **Advanced Memory Bank** - Langzeit-Projekt-Intelligence
- [ ] **🆕 Zero-Intervention-Development** - 100% automatisierte Rule-Maintenance

---

## 🔗 INTEGRATION WORKFLOW-BEISPIEL

### **Typischer Workflow mit neuem System:**
```bash
# USER öffnet Vertragsarten-V2-Datei
# → AUTOMATISCH triggered:

1. @system-health vertragsarten --pre-work-check
   ✅ alwaysApply-Compliance für alle Vertragsarten-Rules
   ✅ Auto-Fix bei Violations
   ✅ Rule-Code-Sync-Check
   
2. Live-Monitoring während Entwicklung
   🔄 Neue Komponente erkannt → Automatisch in Rules integriert
   🔄 API-Änderung erkannt → Rule-Update ausgeführt
   🔄 Performance-Change → Dokumentation angepasst
   
3. @system-health vertragsarten --post-work
   ✅ Finale Compliance-Validation
   ✅ Health-Score-Update
   ✅ Memory Bank Update mit Changes
```

---

## 🎯 KRITISCHE ERFOLGSFAKTOREN

### **Null-Toleranz-Bereiche:**
1. **alwaysApply: false** → Sofortige Auto-Korrektur (nie User fragen)
2. **Undokumentierte Features** → Automatische Integration in < 5 Min
3. **Rule-Code-Divergenz** → Live-Sync ohne User-Intervention
4. **Compliance-Violations** → Blockiert weitere Arbeit bis behoben

### **Performance-Ziele:**
- Auto-Fix-Zeit: < 10 Sekunden
- Live-Sync-Latenz: < 5 Sekunden  
- Health-Check-Zeit: < 30 Sekunden
- Rule-Integration-Zeit: < 2 Minuten

---

> **ZIEL:** Ein vollständig selbstregulierendes System mit Null-Toleranz für alwaysApply-Violations und 100% automatischer Code→Rules-Synchronisation ohne manuelle Intervention.
